;; (defun parse (src)
;;   (loop for i across src
;;      with stack with ctr initiallyfor x = 0 then (+ 1 x)
;;      do (cond 
;; 	  ((eq i #\{) (push x stack))
;; 	  ((eq i #\}) (progn (let ((tmp (pop stack)))
;; 			       (setf (nth x braces)  tmp)
;; 			       (setf (nth tmp braces) x)))))))
(defun list-inherit (ls size)
  (let ((tmp '()) (ls-size (length ls)))
    (loop for i from 0 to size
       do (if (< i ls-size) 
	      (push (nth i ls) tmp)
	      (push 0 tmp)))
    (reverse tmp)))
(defun parse-bf (src)
  (let ((program '()) (braces (make-list  100 :initial-element 0)))
    (labels ((parse-iter (src i)
	       (let ((ch (car src)))
		 (if (not (null ch))
		     (progn (cond ((eq ch #\[) (progn (push i braces)
						      (push #\{ program)))		      
				  ((eq ch #\]) (let ((tmp (pop braces)))
;;						 (setf braces (list-inherit braces  i))
						 (setf (nth i braces) tmp)
						 (setf (nth tmp braces) i)
						 (push #\} program)
						 ))
				  ((eq ch #\.) (push #\. program))
				  ((eq ch #\,) (push #\, program))
				  ((eq ch #\>) (push #\> program))
				  ((eq ch #\<) (push #\< program))
				  ((eq ch #\+) (push #\+ program))
				  ((eq ch #\-) (push #\- program)))
			    (parse-iter (cdr src) (+ i 1)))
		     ))))
      (parse-iter (coerce src 'list) 0)
      (list (reverse program) braces))))

(defun eval-bf (program braces)
  (let ((pc 0) (mem (make-list (length program) :initial-element 0)) (ptr 0))
    (labels ((iter (pc mem ptr)
	       (let ((cur (nth pc program)))
		 (unless (null cur) 

		   (cond ((eq cur #\.) (format t "~S" (code-char (nth ptr mem))))
			 ((eq cur #\,) (setf (nth ptr mem) (read-char)))

			 ((eq cur #\+) (incf (nth ptr mem)))
			 ((eq cur #\-) (decf (nth ptr mem)))
			 ((eq cur #\<) (decf ptr))
			 ((eq cur #\>) (incf ptr))
			 ((eq cur #\{) (if (= 0 (nth ptr mem))(setf pc (nth pc  braces))))
			 ((eq cur #\}) (unless (= 0 (nth ptr mem))(setf pc (- (nth pc braces) 1)))))
		 ;;  (incf pc)
	;;	   (format t "~S ~S ~S ~S~%"  pc mem ptr (nth pc braces))
		   (iter  (+ 1 pc) mem ptr)))))
      (iter pc mem ptr))))
;;CL-USER> (let ((tmp  (parse-bf "+++++++++[>++++++++>+++++++++++>+++++<<<-]>.>++.+++++++..+++.>-.------------.<++++++++.--------.+++.------.--------.>+.")) )
